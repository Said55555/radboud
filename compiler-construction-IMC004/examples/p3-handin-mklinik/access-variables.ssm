    ldrr 5 SP ; store global frame pointer
    ajs 1 ; make space for globals
    ldc 1
    ldr 5 ; global frame pointer
    ldc 1
    add
    sta 0
    ldc 0 ; make space for return value
    ldc main
    jsr
    ajs -0 ; pop function arguments
    ajs -1 ; discard unused value
    ajs -1 ; pop globals
    halt
f: ldr MP
    ldrr MP SP
    ajs 1 ; make space for locals 
    ldc 3
    stl 1
    ldc 0 ; make space for return value
    ldr 5 ; global frame pointer
    ldc 1
    add
    lda 0
    ldc print
    jsr
    ajs -1 ; pop function arguments
    ajs -1 ; discard unused value
    ldc 0 ; make space for return value
    ldl -2
    ldc print
    jsr
    ajs -1 ; pop function arguments
    ajs -1 ; discard unused value
    ldc 0 ; make space for return value
    ldl 1
    ldc print
    jsr
    ajs -1 ; pop function arguments
    ajs -1 ; discard unused value
    ldr 5 ; global frame pointer
    ldc 1
    add
    lda 0
    ldc 1
    add
    ldr 5 ; global frame pointer
    ldc 1
    add
    sta 0
    ldl -2
    ldc 2
    add
    stl -2
    ldl 1
    ldc 3
    add
    stl 1
    ldc 0 ; make space for return value
    ldr 5 ; global frame pointer
    ldc 1
    add
    lda 0
    ldc print
    jsr
    ajs -1 ; pop function arguments
    ajs -1 ; discard unused value
    ldc 0 ; make space for return value
    ldl -2
    ldc print
    jsr
    ajs -1 ; pop function arguments
    ajs -1 ; discard unused value
    ldc 0 ; make space for return value
    ldl 1
    ldc print
    jsr
    ajs -1 ; pop function arguments
    ajs -1 ; discard unused value
f_return:
    ajs -1 ; pop locals
    str MP
    ret
main: ldr MP
    ldrr MP SP
    ajs 0 ; make space for locals 
    ldc 0 ; make space for return value
    ldc 2
    ldc f
    jsr
    ajs -1 ; pop function arguments
    ajs -1 ; discard unused value
main_return:
    ajs 0 ; pop locals
    str MP
    ret
print: ldr MP
    ldrr MP SP
    ajs 0 ; make space for locals 
    ldl -2
    trap 0
print_return:
    ajs 0 ; pop locals
    str MP
    ret
__mktuple__: ldr MP
    ldrr MP SP
    ajs 0 ; make space for locals 
    ldl -3 ; load first argument
    ldl -2 ; load second argument
    stmh 2 ; store both on the heap, and obtain pointer to second value
    stl -4 ; pop tuple pointer to return value
__mktuple___return:
    ajs 0 ; pop locals
    str MP
    ret
fst: ldr MP
    ldrr MP SP
    ajs 0 ; make space for locals 
    ldl -2 ; load first argument
    ldh -1 ; tuple pointer points to second value, but we want the first
    stl -3 ; return value
fst_return:
    ajs 0 ; pop locals
    str MP
    ret
snd: ldr MP
    ldrr MP SP
    ajs 0 ; make space for locals 
    ldl -2 ; load first argument
    ldh 0  ; tuple pointer points to second value
    stl -3 ; return value
snd_return:
    ajs 0 ; pop locals
    str MP
    ret
__mklist__: ldr MP
    ldrr MP SP
    ajs 0 ; make space for locals 
    ldl -3 ; load first argument
    ldl -2 ; load second argument
    stmh 2 ; store both on the heap, and obtain pointer to second value
    stl -4 ; pop tuple pointer to return value
__mklist___return:
    ajs 0 ; pop locals
    str MP
    ret
head: ldr MP
    ldrr MP SP
    ajs 0 ; make space for locals 
    ldl -2 ; load first argument
    ldh -1 ; tuple pointer points to second value, but we want the first
    stl -3 ; return value
head_return:
    ajs 0 ; pop locals
    str MP
    ret
tail: ldr MP
    ldrr MP SP
    ajs 0 ; make space for locals 
    ldl -2 ; load first argument
    ldh 0  ; tuple pointer points to second value
    stl -3 ; return value
tail_return:
    ajs 0 ; pop locals
    str MP
    ret
isEmpty: ldr MP
    ldrr MP SP
    ajs 0 ; make space for locals 
    ldl -2
    ldc 0
    eq ; the empty list is just the null pointer
    stl -3
isEmpty_return:
    ajs 0 ; pop locals
    str MP
    ret
