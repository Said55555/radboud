    ldrr 5 SP ; store global frame pointer
    ajs 0 ; make space for globals
    ldc 0 ; make space for return value
    ldc main
    jsr
    ajs -0 ; pop function arguments
    ajs -1 ; discard unused value
    ajs 0 ; pop globals
    halt
plus: ldr MP
    ldrr MP SP
    ajs 0 ; make space for locals
    ldl -3
    ldl -2
    add
    stl -4
    bra plus_return
plus_return:
    ajs 0 ; pop locals
    str MP
    ret
minus: ldr MP
    ldrr MP SP
    ajs 0 ; make space for locals
    ldl -3
    ldl -2
    sub
    stl -4
    bra minus_return
minus_return:
    ajs 0 ; pop locals
    str MP
    ret
mult: ldr MP
    ldrr MP SP
    ajs 0 ; make space for locals
    ldl -3
    ldl -2
    mul
    stl -4
    bra mult_return
mult_return:
    ajs 0 ; pop locals
    str MP
    ret
main: ldr MP
    ldrr MP SP
    ajs 2 ; make space for locals
    ldc 0 ; make space for return value
    ldc plus
    ldc 0 ; make space for return value
    ldc minus
    ldc 0 ; make space for return value
    ldc mult
    ldc 0
    ldc __mklist__
    jsr
    ajs -2 ; pop function arguments
    ldc __mklist__
    jsr
    ajs -2 ; pop function arguments
    ldc __mklist__
    jsr
    ajs -2 ; pop function arguments
    stl 1
    ldc plus
    stl 2
main_l0:
    ldc -1
    ldc 0 ; make space for return value
    ldl 1
    ldc isEmpty
    jsr
    ajs -1 ; pop function arguments
    xor
    brf main_l1
    ldc 0 ; make space for return value
    ldl 1
    ldc head
    jsr
    ajs -1 ; pop function arguments
    stl 2
    ldc 0 ; make space for return value
    ldl 1
    ldc tail
    jsr
    ajs -1 ; pop function arguments
    stl 1
    ldc 0 ; make space for return value
    ldc 0 ; make space for return value
    ldc 3
    ldc 8
    ldl 2
    jsr
    ajs -2 ; pop function arguments
    ldc print
    jsr
    ajs -1 ; pop function arguments
    ajs -1 ; discard unused value
    bra main_l0
main_l1:
    bra main_return
main_return:
    ajs -2 ; pop locals
    str MP
    ret
print: ldr MP
    ldrr MP SP
    ajs 0 ; make space for locals
    ldl -2
    trap 0
print_return:
    ajs 0 ; pop locals
    str MP
    ret
__mktuple__: ldr MP
    ldrr MP SP
    ajs 0 ; make space for locals
    ldl -3 ; load first argument
    ldl -2 ; load second argument
    stmh 2 ; store both on the heap, and obtain pointer to second value
    stl -4 ; pop tuple pointer to return value
__mktuple___return:
    ajs 0 ; pop locals
    str MP
    ret
fst: ldr MP
    ldrr MP SP
    ajs 0 ; make space for locals
    ldl -2 ; load first argument
    ldh -1 ; tuple pointer points to second value, but we want the first
    stl -3 ; return value
fst_return:
    ajs 0 ; pop locals
    str MP
    ret
snd: ldr MP
    ldrr MP SP
    ajs 0 ; make space for locals
    ldl -2 ; load first argument
    ldh 0  ; tuple pointer points to second value
    stl -3 ; return value
snd_return:
    ajs 0 ; pop locals
    str MP
    ret
__mklist__: ldr MP
    ldrr MP SP
    ajs 0 ; make space for locals
    ldl -3 ; load first argument
    ldl -2 ; load second argument
    stmh 2 ; store both on the heap, and obtain pointer to second value
    stl -4 ; pop tuple pointer to return value
__mklist___return:
    ajs 0 ; pop locals
    str MP
    ret
head: ldr MP
    ldrr MP SP
    ajs 0 ; make space for locals
    ldl -2 ; load first argument
    ldh -1 ; tuple pointer points to second value, but we want the first
    stl -3 ; return value
head_return:
    ajs 0 ; pop locals
    str MP
    ret
tail: ldr MP
    ldrr MP SP
    ajs 0 ; make space for locals
    ldl -2 ; load first argument
    ldh 0  ; tuple pointer points to second value
    stl -3 ; return value
tail_return:
    ajs 0 ; pop locals
    str MP
    ret
isEmpty: ldr MP
    ldrr MP SP
    ajs 0 ; make space for locals
    ldl -2
    ldc 0
    eq ; the empty list is just the null pointer
    stl -3
isEmpty_return:
    ajs 0 ; pop locals
    str MP
    ret
